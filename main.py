from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import os

BOT_TOKEN = os.getenv("BOT_TOKEN") or "YOUR_BOT_TOKEN"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class OrderForm(StatesGroup):
    city = State()
    vin = State()
    dlink = State()
    lang = State()
    comment = State()
    confirm = State()

DLINK_VERSIONS = ["Dlink 3", "Dlink 4", "Dlink 5"]
LANG_OPTIONS = ["UA", "RU"]

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ:")
    await OrderForm.city.set()

@dp.message_handler(state=OrderForm.city)
async def set_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å VIN –∫–æ–¥:")
    await OrderForm.vin.set()

@dp.message_handler(state=OrderForm.vin)
async def set_vin(message: types.Message, state: FSMContext):
    await state.update_data(vin=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*DLINK_VERSIONS)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–µ—Ä—Å—ñ—é Dlink:", reply_markup=kb)
    await OrderForm.dlink.set()

@dp.message_handler(state=OrderForm.dlink)
async def set_dlink(message: types.Message, state: FSMContext):
    if message.text not in DLINK_VERSIONS:
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–µ—Ä—Å—ñ—é Dlink –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
    await state.update_data(dlink=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).add("UA", "RU")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –º—É–ª—å—Ç–∏–º–µ–¥—ñ–∞:", reply_markup=kb)
    await OrderForm.lang.set()

@dp.message_handler(state=OrderForm.lang)
async def set_lang(message: types.Message, state: FSMContext):
    if message.text not in LANG_OPTIONS:
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å UA –∞–±–æ RU.")
    await state.update_data(lang=message.text)
    await message.answer("–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î'):", reply_markup=types.ReplyKeyboardRemove())
    await OrderForm.comment.set()

@dp.message_handler(state=OrderForm.comment)
async def set_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    summary = (
        f"üìù –ó–∞—è–≤–∫–∞:\n"
        f"üìç –ú—ñ—Å—Ç–æ: {data['city']}\n"
        f"üöó VIN: {data['vin']}\n"
        f"üíæ Dlink: {data['dlink']}\n"
        f"üó£Ô∏è –ú–æ–≤–∞: {data['lang']}\n"
        f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data['comment']}"
    )
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–°–∫–∞—Å—É–≤–∞—Ç–∏")
    await message.answer(summary + "\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞—è–≤–∫—É?", reply_markup=kb)
    await OrderForm.confirm.set()

@dp.message_handler(state=OrderForm.confirm)
async def confirm(message: types.Message, state: FSMContext):
    if message.text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞!", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)